#include "rvtx/molecule/molecule.hpp"

#include <nanobind/nanobind.h>

#include <nanobind/stl/string.h>
#include <nanobind/stl/string_view.h>

#include "bindings/defines.hpp"

namespace rvtx
{
    RVTX_PY_EXPORT( Atom )
    {
        nb::class_<Atom> atom( m, "Atom" );
        nb::enum_<Symbol>( atom, "Symbol" )
            .value( "Unknown", Symbol::Unknown )
            .value( "H", Symbol::H )
            .value( "He", Symbol::He )
            .value( "Li", Symbol::Li )
            .value( "Be", Symbol::Be )
            .value( "B", Symbol::B )
            .value( "C", Symbol::C )
            .value( "N", Symbol::N )
            .value( "O", Symbol::O )
            .value( "F", Symbol::F )
            .value( "Ne", Symbol::Ne )
            .value( "Na", Symbol::Na )
            .value( "Mg", Symbol::Mg )
            .value( "Al", Symbol::Al )
            .value( "Si", Symbol::Si )
            .value( "P", Symbol::P )
            .value( "S", Symbol::S )
            .value( "Cl", Symbol::Cl )
            .value( "Ar", Symbol::Ar )
            .value( "K", Symbol::K )
            .value( "Ca", Symbol::Ca )
            .value( "Sc", Symbol::Sc )
            .value( "Ti", Symbol::Ti )
            .value( "V", Symbol::V )
            .value( "Cr", Symbol::Cr )
            .value( "Mn", Symbol::Mn )
            .value( "Fe", Symbol::Fe )
            .value( "Co", Symbol::Co )
            .value( "Ni", Symbol::Ni )
            .value( "Cu", Symbol::Cu )
            .value( "Zn", Symbol::Zn )
            .value( "Ga", Symbol::Ga )
            .value( "Ge", Symbol::Ge )
            .value( "As", Symbol::As )
            .value( "Se", Symbol::Se )
            .value( "Br", Symbol::Br )
            .value( "Kr", Symbol::Kr )
            .value( "Rb", Symbol::Rb )
            .value( "Sr", Symbol::Sr )
            .value( "Y", Symbol::Y )
            .value( "Zr", Symbol::Zr )
            .value( "Nb", Symbol::Nb )
            .value( "Mo", Symbol::Mo )
            .value( "Tc", Symbol::Tc )
            .value( "Ru", Symbol::Ru )
            .value( "Rh", Symbol::Rh )
            .value( "Pd", Symbol::Pd )
            .value( "Ag", Symbol::Ag )
            .value( "Cd", Symbol::Cd )
            .value( "In", Symbol::In )
            .value( "Sn", Symbol::Sn )
            .value( "Sb", Symbol::Sb )
            .value( "Te", Symbol::Te )
            .value( "I", Symbol::I )
            .value( "Xe", Symbol::Xe )
            .value( "Cs", Symbol::Cs )
            .value( "Ba", Symbol::Ba )
            .value( "La", Symbol::La )
            .value( "Ce", Symbol::Ce )
            .value( "Pr", Symbol::Pr )
            .value( "Nd", Symbol::Nd )
            .value( "Pm", Symbol::Pm )
            .value( "Sm", Symbol::Sm )
            .value( "Eu", Symbol::Eu )
            .value( "Gd", Symbol::Gd )
            .value( "Tb", Symbol::Tb )
            .value( "Dy", Symbol::Dy )
            .value( "Ho", Symbol::Ho )
            .value( "Er", Symbol::Er )
            .value( "Tm", Symbol::Tm )
            .value( "Yb", Symbol::Yb )
            .value( "Lu", Symbol::Lu )
            .value( "Hf", Symbol::Hf )
            .value( "Ta", Symbol::Ta )
            .value( "W", Symbol::W )
            .value( "Re", Symbol::Re )
            .value( "Os", Symbol::Os )
            .value( "Ir", Symbol::Ir )
            .value( "Pt", Symbol::Pt )
            .value( "Au", Symbol::Au )
            .value( "Hg", Symbol::Hg )
            .value( "Tl", Symbol::Tl )
            .value( "Pb", Symbol::Pb )
            .value( "Bi", Symbol::Bi )
            .value( "Po", Symbol::Po )
            .value( "At", Symbol::At )
            .value( "Rn", Symbol::Rn )
            .value( "Fr", Symbol::Fr )
            .value( "Ra", Symbol::Ra )
            .value( "Ac", Symbol::Ac )
            .value( "Th", Symbol::Th )
            .value( "Pa", Symbol::Pa )
            .value( "U", Symbol::U )
            .value( "Np", Symbol::Np )
            .value( "Pu", Symbol::Pu )
            .value( "Am", Symbol::Am )
            .value( "Cm", Symbol::Cm )
            .value( "Bk", Symbol::Bk )
            .value( "Cf", Symbol::Cf )
            .value( "Es", Symbol::Es )
            .value( "Fm", Symbol::Fm )
            .value( "Md", Symbol::Md )
            .value( "No", Symbol::No )
            .value( "Lr", Symbol::Lr )
            .value( "Rf", Symbol::Rf )
            .value( "Dd", Symbol::Dd )
            .value( "Sg", Symbol::Sg )
            .value( "Bhj", Symbol::Bhj )
            .value( "Hs", Symbol::Hs )
            .value( "Mt", Symbol::Mt )
            .value( "Ds", Symbol::Ds )
            .value( "Rg", Symbol::Rg )
            .value( "Uub", Symbol::Uub )
            .value( "Uut", Symbol::Uut )
            .value( "Uuq", Symbol::Uuq )
            .value( "Uup", Symbol::Uup )
            .value( "Uuh", Symbol::Uuh )
            .value( "Uus", Symbol::Uus )
            .value( "Uuo", Symbol::Uuo )
            .export_values();

        atom.def( nb::init<>() )
            .def_rw( "symbol", &Atom::symbol )
            .def_rw( "residue_id", &Atom::residueId )
            .def_prop_ro( "radius", &Atom::getRadius )
            .def_prop_ro( "name", &Atom::getName );
    }

    RVTX_PY_EXPORT( Chain )
    {
        nb::class_<Chain>( m, "Chain" )
            .def( nb::init<>() )
            .def_rw( "id", &Chain::id )
            .def_rw( "name", &Chain::name )
            .def_rw( "residues", &Chain::residues );
    }

    RVTX_PY_EXPORT( Residue )
    {
        nb::class_<Residue> residue( m, "Residue" );
        residue.def_rw( "id", &Residue::id )
            .def( nb::init<>() )
            .def_rw( "name", &Residue::name )
            .def_rw( "type", &Residue::type )
            .def_rw( "atoms", &Residue::atoms )
            .def_rw( "bonds", &Residue::bonds )
            .def_rw( "chain_id", &Residue::chainId );

        nb::enum_<Residue::Type>( residue, "Type" )
            .value( "Molecule", Residue::Type::Molecule )
            .value( "Ligand", Residue::Type::Ligand )
            .value( "Ion", Residue::Type::Ion )
            .value( "Water", Residue::Type::Water )
            .export_values();
    }

    RVTX_PY_EXPORT( Bond )
    {
        nb::class_<Bond>( m, "Bond" )
            .def( nb::init<>() )
            .def_rw( "first", &Bond::first )
            .def_rw( "second", &Bond::second );
    }

} // namespace rvtx